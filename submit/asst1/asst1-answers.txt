Step 4:

1. 

sys161: System/161 release 2.0.3, compiled Aug 10 2015 13:31:07

OS/161 base system version 1.99.08
Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
   President and Fellows of Harvard College.  All rights reserved.

Put-your-group-name-here's system version 0 (DUMBVM #1)

292k physical memory available
Device probe...
lamebus0 (system main bus)
emu0 at lamebus0
ltrace0 at lamebus0
ltimer0 at lamebus0
beep0 at ltimer0
rtclock0 at ltimer0
lrandom0 at lamebus0
random0 at lrandom0
lhd0 at lamebus0
lhd1 at lamebus0
lser0 at lamebus0
con0 at lser0

cpu0: MIPS/161 (System/161 2.x) features 0x0
OS/161 kernel [? for menu]: 

2. 

commit 402ba79b4d2c83ca35d60f4f6a880567714e0125
Author: arya23065 <arya.subramanyam@alumni.ubc.ca>
Date:   Sun Sep 13 04:49:01 2020 -0700

    Working on step 3

commit a74497ebd9fe9c1bf0af840e16f99ad1ada01436
Author: Arya Subramanyam <arya2306@ssh-linux1.ece.ubc.ca>
Date:   Sun Sep 13 04:16:39 2020 -0700

    Initial commit of os161 for CPEN331
    
3.

asst1-start

Step 5:

1. The first line of OS/161 executed when a trap occurs can be found in the file src/kern/arch/mips/locore/exception-mips1.S. 
    The exception is triggered by "j common_exception" which is on line 69 for UTLB exceptions and line 87 for general exceptions. 
    From this point, the trapframe is set up and then control gets transferred to mips_trap() in src/kern/arch/mips/locore/trap.c.
    This functions determines the type of trap using exception codes, and in case of an interrupt (since it is a type of trap, the initial
    process of exception handling does not differ), the interrupt handler is called. Consequently, mainbus_interrupt() is called which 
    can be found in src/kern/arch/sys161/dev/lamebus_machdep.c. 

2. The code in OS/161 that invokes system calls from user programs can be found in src/userland/lib/libc/arch/mips/syscalls-mips.S on line 84.
    When the syscall causes a trap, it is recognised by examining exception codes, in mips_trap() in src/kern/arch/mips/locore/trap.c.
    The OS/161 code that handles system calls can be found in this same file on line 224. 

3. There are libc functions in the common part of the source tree as well as in userland, as this gives access to the common functions such as 
    strlen and printf to users as well as the kernel, as they both need to utilise them (they are basic, required functions). There are two 
    different copies of these in order to prevent the user from tempering with the kernel's execution of these functions - in case of any errors,
    only the userland copy of the libc might be damaged but the kernel's copy will be alright, which will in turn allow the user's functionality
    to be maintained as well. 

4. Two things that configure configures are - 
    a. Target hardware platform, PLATFORM, to 'sys161'
    b. Machine type, MACHINE, to 'mips'
    Any changes in configuration might invalidate the configuration and make you need/want to rerun it, such as a change in OS, or running it on 
    different hardware with different default debug flag, or the default locations of the root of the installed system.

5. Some of the details that make a function 'machine-dependent' could be the bit widths for certain signals, the values assigned to important
    constants, instructions, the amount of registers and the usage of big or little endian. It is important to maintain this separation in 
    order to increase reusability of code - machine-independent code can be reused directly while machine-dependent code can be altered.

6. In the file src/kern/arch/mips/locore/exception-mips1.S, on line 133, it states that the trapframe is 37 words long therefore there are 
    37 uint32_t values, as indicated in src/kern/arch/mips/include/traprframe.h. Therefore the size is 37 * 32 / 8 = 148 bytes. 

7. You should rerun the kern/conf/config script when you change kernel configuration settings or if you change any piece of code. 
    Examples of when the configuration file needs to be rerun, after corrections, is in case you run it in the wrong location, 
    if you have syntax errors, or if you changed the actual headers during compilation or if you file list cannot be validated. 

8. You should run bmake depend in kern/compile/DUMBVM in order to update the header file depend information (so in case you update dependencies). 
    You can rerun it if you change header file inclusions or after rerunning config. 

9. You should run bmake in kern/compile/DUMBVM in order to build the C program and user libraries in DUMBVM - so whenever a change in code is 
    made to DUMBVM, after which you can run bmake install to copy the results into ~/os161/root.

10. First, add a file at a known location with only "Hello World" in it. Boot the kernel using 'sys161 kernel', open the menu by typing '?',
    open the operations menu using '?o', then type 'pf *filelocation*' in order to print the file. This while print "Hello World!". 
    OR 
    In order to create a new command to print out "Hello World!" - navigate to the file src/kern/main/menu.c, on line 502, add a command to the 
    main menu by adding "[?h] Print Hello World", to the array. Additionally, navigate to the struct on line 527 and add { "?h",cmd_hello } to 
    the menu sections. Then add a function in the file, before line 405 in the menus section, as follows - 
            static
            int
            cmd_hello()
            {
                kprintf("Hello World!");
                return 0;
            }

11. You need to include the 'fundamental functionalities' included in the user bins, in OS/161 distribution and not use the standard utilities 
    that are present on the machine on which you're working, as when you're running OS/161 and you enter a command, it will search OS/161's 
    directories for an appropirate command - since the kernel you will be running will be of OS/161 and not your own machines kernel. Hence, 
    it is important to define these functions so that the OS/161 kernel knows what to do - the virtual machine is abstracted and cannot access 
    commands of your local machine.

12. When a user program exits, the return value is passed to the parent function which called the current program, by placing it in a predefined
    special register that expects to receive the return value. Upon research, I have found that result of system calls from user programs can be 
    found in register v0, and register a3 indicated whether or not an error occurred. From src/userland/lib/crt0/mips/crt0.S, it can be seen that 
    the return value of main is put into register v0, then moved to the callee-save register s0, and then register a0 as the return argument. 

13. Navigate to the file src/kern/include/kern/syscall.h and define your system call number. Add a file containing the system call code in 
    src/kern/syscall. Add the syscall details to the switch statement on line 102 in the file src/kern/arch/mips/syscall/syscall.c. Since we've 
    modified code, we must rerun the kern/conf/config script and rerun bmake depends. 

Step 7:

14. The first function to that executes when OS/161 starts up is __start().

    gdb output-     Remote debugging using unix:.sockets/gdb
                    __start () at ../../arch/sys161/main/start.S:54
                    54         addiu sp, sp, -24

15. The first assembly instruction to execute is addiu sp, sp, -24

    gdb output-     Remote debugging using unix:.sockets/gdb
                    __start () at ../../arch/sys161/main/start.S:54
                    54         addiu sp, sp, -24

16. Num     Type           Disp Enb Address    What
    1       breakpoint     keep y   0x800139e4 in kmain at ../../main/main.c:211
    2       breakpoint     keep y   0x80014a0c in menu at ../../main/menu.c:697

17. The early bootstrap code in OS161 will copy exception handlers to where the processor expects them to be. Then it will jump to kmain.


18. The asembly instructions that calls the kernel main function is jal kmain. 

19. Please not that lines of code in boot() that aren't function calls such as kprintf statements, and repetitions have been removed

    (gdb) n
    109             ram_bootstrap();
    (gdb) n
    110             proc_bootstrap();
    (gdb) n
    111             thread_bootstrap();
    (gdb) n
    112             hardclock_bootstrap();
    (gdb) n
    113             vfs_bootstrap();
    (gdb) n
    114             kheap_nextgeneration();
    (gdb) n
    119             mainbus_bootstrap();
    (gdb) n
    122             pseudoconfig();
    (gdb) n
    127             vm_bootstrap();
    (gdb) n
    128             kprintf_bootstrap();
    (gdb) n
    129             thread_start_cpus();
    (gdb) n
    132             vfs_setbootfs("emu0");

20. (gdb) p bootcpu 
    $1 = (struct cpu *) 0x80000
    (gdb) p *bootcpu 
    Cannot access memory at address 0x80000

21. (gdb) p bootcpu
    $2 = (struct cpu *) 0x8003af00
    (gdb) p *bootcpu
    $3 = {c_self = 0x8003af00, c_number = 0, c_hardware_number = 0, c_curthread = 0x8003bf80, c_zombies = {tl_head = {tln_prev = 0x0, tln_next = 0x8003af1c, tln_self = 0x0}, 
        tl_tail = {tln_prev = 0x8003af10, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_hardclocks = 0, c_spinlocks = 0, c_isidle = false, c_runqueue = {tl_head = {
        tln_prev = 0x0, tln_next = 0x8003af44, tln_self = 0x0}, tl_tail = {tln_prev = 0x8003af38, tln_next = 0x0, tln_self = 0x0}, tl_count = 0}, c_runqueue_lock = {
        splk_lock = 0, splk_holder = 0x0}, c_ipi_pending = 0, c_shootdown = {{ts_placeholder = 0} <repeats 16 times>}, c_numshootdown = 0, c_ipi_lock = {splk_lock = 0, 
        splk_holder = 0x0}}

22. 0 cpus

23. $2 = {arr = {v = 0x0, num = 0, max = 0}}

